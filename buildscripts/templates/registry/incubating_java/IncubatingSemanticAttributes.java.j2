{%- macro to_java_key_type(attribute) -%}
    {{ attribute.type | instantiated_type | map_text("java_key_type") }}
{%- endmacro %}
{%- macro to_java_key_factory(attribute) -%}
    {{ attribute.type | instantiated_type | map_text("java_key_factory") }}
{%- endmacro %}
{%- set my_file_name = ctx.root_namespace | pascal_case ~ "IncubatingAttributes.java" -%}
{%- set my_class_name = ctx.root_namespace | pascal_case ~ "IncubatingAttributes" -%}
{{- template.set_file_name(my_file_name) -}}
/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */
package io.opentelemetry.semconv.incubating;

import static io.opentelemetry.api.common.AttributeKey.booleanKey;
import static io.opentelemetry.api.common.AttributeKey.doubleKey;
import static io.opentelemetry.api.common.AttributeKey.longKey;
import static io.opentelemetry.api.common.AttributeKey.stringKey;
import static io.opentelemetry.api.common.AttributeKey.stringArrayKey;

import static io.opentelemetry.semconv.AttributeKeyTemplate.stringArrayKeyTemplate;
import static io.opentelemetry.semconv.AttributeKeyTemplate.stringKeyTemplate;

import io.opentelemetry.api.common.AttributeKey;
import io.opentelemetry.semconv.AttributeKeyTemplate;
import java.util.List;

// DO NOT EDIT, this is an Auto-generated file from buildscripts/templates/registry/incubating_java/IncubatingSemanticAttributes.java.j2
@SuppressWarnings("unused")
public final class {{ my_class_name }} {
    {% for attribute in ctx.attributes | sort(attribute="name") %}{% if attribute is experimental %}
    {%- if attribute is deprecated %}
    {%- set deprecated_javadoc = "@deprecated " ~ attribute.deprecated -%}
    {%- endif -%}
    {{ [attribute.brief, concat_if("\n\nNotes:\n\n", attribute.note), deprecated_javadoc] | comment(indent=4) }}
    {% if attribute is deprecated %}@Deprecated{% endif %} public static final {{ to_java_key_type(attribute) | trim }} {{ attribute.name | screaming_snake_case }} = {{ to_java_key_factory(attribute) | trim }}("{{ attribute.name }}");
    {% endif %}{% endfor %}
    {% for attribute in ctx.attributes | sort(attribute="name") %}{% if attribute.type is mapping and attribute is experimental %}
    // Enum definitions
    /** Values for {@link #{{ attribute.name | screaming_snake_case }}}. */
    public static final class {{ attribute.name | pascal_case }}Values {
      {%- for member in attribute.type.members %}
      {{ [member.brief or member.id] | comment(indent=4) }}
      public static final String {{ member.id | screaming_snake_case }} = "{{ member.value }}";
      {%- endfor %}
      private {{ attribute.name | pascal_case }}Values() {}
    }
    {% endif %}{% endfor %}

    private {{ my_class_name }}() {}
}